#!/usr/bin/env python
# encoding: utf-8
'''
@author: liuchang
@software: PyCharm
@file: checkDataAll2.py
@time: 2020-06-18 15:36
'''
#!/usr/bin/python
# -*- coding: UTF-8 -*-
import json
import os
import sys
import re
import datetime
reload(sys)
sys.setdefaultencoding('utf-8')
sys.path.append('./')
from pyspark import SparkConf,SparkContext
from pyspark.sql import HiveContext,SparkSession
import pyspark


# 数据规范性检验
class checkRes():

    def __init__(self, schemaConfAdd):
        self.pdict = [] #schema结构
        self.readSchemaMappingConf(schemaConfAdd) #SM初始化


    #读取实体schema，数据建立实体的模版
    def readSchemaMappingConf(self, add):
        fd = open(add)
        for line in fd:
            lineArr = line[:-1].split()
            if lineArr[1] not in self.pdict:
                self.pdict.append(lineArr[1])
        fd.close()



    def checkData(self, jdict):
        errData = []
        if type(jdict) != dict:
            errData.append('002')

        # Step1: 检查'@kg_id'、'@type'、'createTime'
        if '@kg_id' not in list(jdict.keys()) or '@type' not in list(jdict.keys()) or '@creatTime' not in list(
                jdict.keys()):
            errData.append('003')
        elif jdict['@kg_id'] is None or jdict['@type'] is None or jdict['@creatTime'] is None:
            errData.append('011')

        # Step2: 检查'P0000XX'
        for key in list(jdict.keys()):
            if key in self.pdict and type(jdict[key]) != dict:
                errData.append('004')
            if key in self.pdict and type(jdict[key]) == dict:
                # 检查'P0000XX'对应的value
                if '@value' not in list(jdict[key].keys()):
                    errData.append('006')
                if jdict[key]['@value'] is None:
                    errData.append('009')
                # 检查'P0000XX'对应的history
                if '@history' in list(jdict[key].keys()) and type(jdict[key]['@history']) != list:
                    errData.append('007')
                if '@history' in list(jdict[key].keys()):
                    for i in range(len(jdict[key]['@history'])):
                        if type(jdict[key]['@history'][i]) != dict:
                            errData.append('008')
                        for key1 in jdict[key]['@history'][i].keys():
                            if jdict[key]['@history'][i][key1] is None:
                                errData.append('010')

            if key == 'P00000012':
                if '@history' in list(jdict[key].keys()):
                    for i in range(len(jdict[key]['@history'])):
                        if type(jdict[key]['@history'][i]) == dict:
                            if '@structValue' in list(jdict[key]['@history'][i].keys()):
                                if jdict[key]['@history'][i]['@structValue'] is None:
                                    errData.append('005')
                if '@structValue' in list(jdict[key].keys()):
                    if jdict[key]['@structValue'] is None:
                        if '005' not in errData:
                            errData.append('005')


        P00000003_add = []
        P00000011_add = []
        P00000022_add = []
        P00000023_add = []

        # 471种枚举值 (KG-basic所有值）+ 2
        P00000003_enum = ['有限责任公司(自然人投资或控股)','有限责任公司分公司(外商投资企业投资,私营)','有限责任公司(外商投资企业投资,私营)', '有限责任公司(自然人独资)', '其他有限责任公司分公司(2190)', '个体工商户', '有限责任公司(自然人投资或控股)(1130)',
                          '有限责任公司(外商合资)', '其他有限责任公司', '其他有限责任公司分公司', '有限责任公司', '分公司', '有限责任公司(非自然人投资或控股的法人独资)',
                          '有限责任公司分公司(自然人独资)', '个人独资企业(4540)', '股份有限公司分公司(非上市、自然人投资或控股)', '有限责任公司(中外合资)',
                          '有限责任公司分公司(非自然人投资或控股的法人独资)(2153)', '有限责任公司(国有独资)', '有限责任公司分公司(自然人投资或控股)', '全民所有制',
                          '有限责任公司(自然人投资或控股的法人独资)', '其他股份有限公司分公司(非上市)', '股份有限公司分公司(上市、国有控股)', '个人独资企业', '有限责任公司(外国法人独资)',
                          '股份合作制', '有限责任公司(法人独资)', '股份有限公司(非上市、自然人投资或控股)', '其他股份有限公司分公司(非上市)(2229)', '非公司外商投资企业分支机构',
                          '有限责任公司(台港澳法人独资)', '有限合伙企业', '有限责任公司分公司', '有限责任公司(外商投资企业法人独资)',
                          '有限责任公司分公司(自然人投资或控股的法人独资)(2152)', '有限责任公司(非自然人投资或控股的法人独资)(1153)', '有限责任公司分公司(非自然人投资或控股的法人独资)',
                          '有限责任公司分公司(法人独资)', '有限责任公司分公司(自然人投资或控股的法人独资)', '台港澳分公司', '其他股份有限公司分公司(上市)',
                          '有限责任公司(自然人独资)(1151)', '全民所有制分支机构(非法人)', '非公司企业法人分支机构(国有经济)', '普通合伙企业', '农民专业合作经济组织',
                          '有限责任公司分公司(国有控股)', '集体事业单位营业', '有限责任公司(港澳台与境内合资)', '有限责任公司(台港澳与境内合资)', '集体所有制',
                          '其他股份有限公司(非上市)', '有限责任公司(台港澳合资)', '有限责任公司(台港澳自然人独资)', '股份有限公司分公司(非上市、国有控股)',
                          '有限责任公司分公司(国有独资)', '有限责任公司(中外合资)分公司', '有限责任公司(外国自然人独资)', '有限责任公司(国有控股)', '集体分支机构(非法人)',
                          '有限责任公司分公司(2100)', '股份有限公司分公司(上市、自然人投资或控股)', '集体所有制(股份合作)', '特殊普通合伙企业分支机构', '股份有限公司分公司',
                          '有限责任公司分公司(外商投资企业投资)', '有限责任公司(外商投资企业投资)', '有限责任公司分公司(自然人投资或控股)(2130)', '有限责任公司(港澳台自然人独资)',
                          '股份有限公司分公司(非上市、外商投资企业投资)', '办事处', '外商投资企业分公司', '股份有限公司', '有限责任公司分公司(外商投资企业与内资合资)',
                          '国有经营单位(非法人)', '内资企业法人', '股份有限公司(上市、自然人投资或控股)', '外商投资企业分支机构', '其他股份有限公司分公司(上市)(2219)',
                          '外国(地区)企业常驻代表机构', '股份有限公司分公司(上市)', '股份有限公司分公司(非上市)', '有限责任公司分公司(外商投资企业合资)', '一人有限责任公司',
                          '内资分公司', '个人独资企业分支机构', '有限责任公司分公司(外商投资企业法人独资)', '股份有限公司分公司(国有控股)',
                          '有限责任公司(自然人投资或控股的法人独资)(1152)', '其他有限责任公司(1190)', '私营有限责任公司(自然人控股或私营性质企业控股)',
                          '有限责任公司(外国自然人独资)(5140)', '有限责任公司(外商投资企业与内资合资)', '股份有限公司分公司(上市、外商投资企业投资)', '农民专业合作社分支机构',
                          '有限责任公司(港澳台法人独资)', '分公司(5810)', '合伙企业', '股份有限公司(非上市)', '非公司台、港、澳投资企业分支机构', 'NONE', '国有事业单位营业',
                          '台、港、澳投资企业分公司', '国有经营单位(非法人)(4410)', '股份合作制分支机构', '非公司私营企业', '来料加工', '个体', '有限责任公司(台港澳与境内合作)',
                          '农民专业合作社', '有限责任公司(外商投资、非独资)', '集体经营单位(非法人)', '股份有限公司分公司(非上市、自然人投资或控股)(2222)',
                          '一人有限责任公司(自然人独资)', '有限责任公司分公司(自然人独资)(2151)', '股份制', '内资非法人企业、非公司私营企业', '农民专业合作社(9100)',
                          '有限责任公司(中外合作)', '非公司台、港、澳企业(台港澳合资)', '联营', '经营单位(非法人)', '股份有限公司分公司(国有控股)(2223)',
                          '非公司企业法人(集体经济)', '集体经济', '股份制分支机构', '股份有限公司(非上市、自然人投资或控股)(1222)', '港、澳、台投资企业分支机构',
                          '台、港、澳投资企业分支机构', '股份有限公司(台港澳与境内合资、未上市)', '股份有限公司(中外合资、未上市)', '股份有限公司分公司(上市、国有控股)(2213)',
                          '个体户', '集体所有制(股份合作)-全资设立', '全民所有制(3100)', '有限责任公司(台港澳法人独资)分公司', '有限责任公司(台港澳与境内合资)分公司',
                          '股份有限公司(上市)', '股份有限公司(上市、国有控股)', '集体经营单位(非法人)(4420)', '股份有限公司(非上市、外商投资企业投资)',
                          '有限责任公司(台港澳与外国投资者合资)', '一人有限责任公司分公司', '有限责任公司(外商投资企业合资)', '有限责任公司分公司(国有控股)(2140)',
                          '股份有限公司(非上市、国有控股)', '有限责任公司(国有独资)(1110)', '内资企业集团', '普通合伙企业分支机构', '全民所有制分支机构(非法人)(4310)',
                          '股份有限公司(台港澳合资、未上市)', '非公司企业法人(股份合作制)', '其他股份有限公司(上市)', '外国(地区)企业在中国境内从事生产经营活动',
                          '有限责任公司(台港澳非法人经济组织独资)', '股份有限公司分公司(非上市)(2220)', '股份有限公司(中外合资、上市)分公司', '有限责任公司(外国法人独资)分公司',
                          '一人有限责任分公司(自然人投资或控股的法人独资)', '外商投资企业办事处', '股份有限公司(中外合资、上市)', '集体所有制(股份合作)分支机构', '其他', '内资公司',
                          '股份制企业(非法人)', '内资非法人企业、非公司私营企业及内资非公司企业分支机构', '集体企业', '家庭经营', '股份有限公司分公司(2200)',
                          '有限责任公司分公司(国有独资)(2110)', '有限责任公司(外商投资企业投资', '私营)', '有限责任公司(港澳台投资、非独资)', '内资企业法人分支机构(非法人)',
                          '有限责任公司(法人独资)(外商投资企业投资)', '有限责任公司(外国法人独资)(5150)', '有限合伙企业(4533)', '有限责任公司(国有控股)(1140)',
                          '有限中外合伙', '事业单位', '有限责任公司(中外合资)(5110)', '其他外商投资企业分支机构', '个人经营', '非公司企业法人分支机构(集体经济)',
                          '特殊普通合伙企业', '股份有限公司分公司(非上市、外商投资企业投资、私营)', '有限责任公司(外国非法人经济组织独资)', '分公司分公司', '外资企业集团',
                          '其他台港澳投资企业分支机构', '事业单位营业', '股份制分支机构(4330)', '国有经济', '国有社团法人营业', '有限责任公司(港澳台合资)', '个体(内地)',
                          '集体社团法人营业', '股份有限公司(非上市、外商投资企业投资', '外国企业常驻代表机构', '中外合资企业分支机构', '其他股份有限公司(非上市)(1229)', '集团',
                          '有限责任公司其他', '非公司企业法人(国有经济)', '联营(非法人)', '农民专业合作经济组织分支机构', '普通合伙企业(4531)', '合伙企业分支机构',
                          '一人有限责任公司(私营法人独资)', '有限责任公司(台港澳法人独资)(6150)', '股份合作制分支机构(4340)', '普通合伙', '分公司(6810)', '国有企业',
                          '港、澳、台其他', '港、澳、台办事处', '有限责任公司分公司(外商投资企业法人独资)(2123)', '其他股份有限公司(上市)(1219)', '外商独资企业分支机构',
                          '内资非法人企业、非公司私营企业及内资非公司企业分支机构(4000)', '一人有限责任公司(1150)', '事业单位营业(4100)', '非公司企业法人(联营)',
                          '股份有限公司(台港澳与境内合资、上市)', '有限责任公司(台港澳自然人独资)分公司', '集体所有制(3200)', '股份有限公司(中外合资、未上市)分公司', '临时个体工商户',
                          '台、港、澳投资公司分公司', '私营企业', '集体所有制(股份合作)-全资设立(分支机构)', '外商投资企业其他分支机构', '集体分支机构(非法人)(4320)',
                          '台港澳投资企业办事处', '外国(地区)企业在中国境内从事经营活动', '集体(内联-独资)', '股份有限公司(港澳台投资、上市)',
                          '有限责任公司分公司(外商投资企业投资)(2120)', '一人有限责任公司(自然人投资或控股的法人独资)', '股份有限公司分公司(上市)(2210)', '外商投资合伙企业分支机构',
                          '外国(地区)有限责任公司分支机构', '联营(法人)', '有限责任公司(中外合作)分公司', '集体', '港、澳、台投资合伙企业分支机构', '外国(地区)公司分支机构',
                          '全民', '有限责任公司(其他台港澳有限责任公司)', '外商投资企业', '独资经营(港资)', '个人独资企业分支机构(4560)',
                          '股份有限公司(中外合资、未上市)(5210)', '有限责任公司(港澳台与外国投资者合资)', '股份有限公司分公司(上市、自然人投资或控股)(2212)', '制造业',
                          '办事处(5830)', '私营企业法人', '内资企业法人分支机构(非法人)(4300)', '有限责任公司(外商投资企业法人独资)(1123)',
                          '外国(地区)股份有限责任公司分支机构', '股份有限公司(台港澳与境内合资、未上市)分公司', '非公司台、港、澳企业(台港澳与境内合作)',
                          '股份有限公司(港澳台与境内合资、未上市)', '有限责任公司分公司(外商投资企业投资', '有限责任公司(台港澳与境内合资)(6110)', '股份合作制(3400)',
                          '外商投资有限合伙企业', '股份有限公司(上市、外商投资企业投资)', '分公司(外国(地区)企业在中国境内从事经营活动)', '私营有限责任公司(外商投资企业与内资合资)',
                          '有限合伙企业分支机构', '股份有限公司(非上市)(1220)', '非公司企业法人分支机构(股份合作制)', '独资经营(台资)', '股份有限公司(上市公司)',
                          '股份有限公司分公司(非上市、外商投资企业投资)(2221)', '外商投资企业分支机构(5800)', '非公司外商投资企业分支机构(5820)',
                          '有限责任公司(外国自然人独资)分公司', '承包工程', '非国有独资有限责任公司分公司(私营)', '经营单位(非法人)(4400)',
                          '有限责任公司分公司(外商投资企业与内资合资)(2122)', '房屋、土木工程的建造、装饰或线路、管道、设备的安装等工程', '有限责任公司(台港澳合资)(6130)', '三来一补',
                          '个人所', '外国(地区)企业在中国境内从事经营活动其他', '有限责任公司(台港澳法人独资)分支机构', '外商独资企业', '有限责任公司(外商投资)', '受托经营管理',
                          '正常', '股份有限公司(港澳台投资、未上市)', '股份有限公司(外商合资、未上市)', '其他外商投资有限责任公司', '有限责任公司(外商合资)分公司', '非上市股份有限公司',
                          '有限责任公司(外商合资)(5130)', '个体工商户(香港)', '股份有限公司(非上市、国有控股)(1223)', '有限责任公司(台港澳合资)分公司', '其他分公司',
                          '一人有限责任公司(非自然人投资或控股的法人独资)', '有限责公司分公司(国有独资)', '有限责任公司(法人独资', '有限责任公司(中外合资外资比例低于25%)',
                          '农民专业合作社分支机构(9200)', '其他(5890)', '合作经营(港资)', '股份有限公司(台港澳与境内合资、上市)分公司', '非国有独资有限责任公司分公司',
                          '非公司(台、港、澳资)', '非上市股份有限公司分公司', '国有事业单位营业(4110)', '有限责任公司(其他)', '外商投资企业其他', '外商投资合伙企业',
                          '股份有限公司(外商投资、未上市)', '党政机关', '有限台港澳合伙', '其他类型', '有限责任公司(港澳台与境内合作)', '股份有限公司(外商投资、上市)',
                          '股份有限公司(中外合资、上市)(5220)', '有限责任公司(中外合作)(5120)', '个体工商户(临时)', '联营(4600)',
                          '股份有限公司分公司(上市、外商投资企业投资)(2211)', '科技类', '合伙企业(普通合伙)', '台、港、澳投资企业', '有限责任公司(外商投资企业与内资合资)(1122)',
                          '有限责任公司(台港澳与外国投资者合资)分公司', '其他非公司台、港、澳企业', '矿产资源勘探开发', '股份有限公司(台港澳与境内合资、未上市)(6210)',
                          '股份有限公司(台港澳与外国投资者合资、上市)', '一人有限责任公司(内资法人独资)', '普通合伙企业分支机构(4551)', '一人有限责任公司(法人独资)', '私营独资企业',
                          '合资经营(港资)', '特殊普通合伙企业(4532)', '有限责任公司分公司(外商投资企业合资)(2121)', '股份有限公司(台港澳与外国投资者合资、未上市)',
                          '非公司私营企业(4500)', '中外合资企业', '有限责任公司(台港澳与境内合作)(6120)', '非公司外商投资企业(中外合作)', '其他外商投资股份有限公司',
                          '股份合作企业经营单位(非法人)', '分所', '6180', '非公司外商投资企业(中外合作)-法人', '公立', '外商投资公司分公司', '内资企业法人(3000)',
                          '台港澳投资特殊普通合伙企业', '外商投资普通合伙企业', '非公司港、澳、台企业(港澳台与境内合作)', '合资经营(台资)', '全民(内联-独资)', '社团法人营业',
                          '非公司外商投资企业(中外合作)-非法人', '有限责任公司(外商投资企业投资)(1120)', '普通台港澳合伙', '普通合伙所',
                          '有限责任公司(以投资为主要业务的外商投资合伙企业投资)', '普通中外合伙', '股份合作企业分支机构', '有限责任公司(外商投资企业合资)(1121)',
                          '股份有限公司(外商合资、未上市)分公司', '股份有限公司(港澳台与境内合资、上市)', '银行', '非公司外商投资企业(外商合资)', '承包经营管理外商投资企业',
                          '股份有限公司(台港澳合资、上市)', '有限责任公司(台、港、澳资)', '有限责任公司(1100)', '股份有限公司(上市、自然人投资或控股)(1212)', '其他(5190)',
                          '外商保险分公司', '一人有限责任公司分公司(2150)', '集体企业经营单位(非法人)', '中外合作企业分支机构', '其它经济成份联营', '外商独资企业办事机构',
                          '有限责任公司(台港澳与境内合作)分公司', '股份制企业分支机构', '港澳台--有限责任公司', '台、港、澳投资企业分支机构(6800)', '合伙企业分支机构(4550)',
                          '一人有限责任公司分公司(自然人独资)', '私营合伙企业', '联营(3500)', '股份有限公司(1200)', '非公司企业法人分支机构(股份制)',
                          '非公司企业法人(股份制)', '股份有限公司(其他)', '外国(地区)企业在中国境内从事经营活动银行', '私人股份有限公司', '有限责任公司(外国法人独资)分支机构',
                          '国有企业经营单位(非法人)', '外国(地区)无限责任公司分支机构', '个体(台、港、澳)', '承包经营管理', '非公司', '台港澳投资有限合伙企业', '独资私营企业',
                          '个体工商户(台湾)', '非公司港、澳、台投资企业分支机构', '有限合伙企业(外商投资)', '全民(内联)', '有限责任公司(台港澳与外国投资者合资)(6170)', '会员制',
                          '其他台港澳投资有限责任公司', '其他(外国(地区)企业在中国境内从事经营活动)', '普通外国合伙', '有限责任公司(台港澳与境内合资)分支机构', '外资银行(金融保险)',
                          '股份有限公司(台港澳合资、上市)分公司', '港、澳、台投资独资企业分支机构', '有限责任公司(台港澳自然人独资)(6140)', '股份制企业(非法人)(4700)',
                          '特殊普通合伙企业分公司', '港、澳、台有限合伙企业', '来件装配', '合伙所', '有限责任公司分支机构(台、港、澳投资企业)', '办事处(6830)', '其他联营',
                          '外国(地区)企业在中国境内从事经营活动保险', '股份制(全资设立)', '国有与国有企业联营', '上市股份有限公司', '股份有限公司(外商投资企业投资)',
                          '中外合资经营(外资比例低于25%)', '合伙制', '联营分支机构', '有限责任公司(以投资为主要业务的外商投资合伙企业投资)分公司', '一人有限责任公司分公司(私营法人独资)',
                          '全民与集体联营', '个人', '外国(地区)其他形式公司分支机构', '内资集团', '其他(相互保险社)', '有限责任公司(外商投资、非独资)分公司',
                          '股份有限公司(台港澳与境内合资、未上市)分支机构', '港、澳、台投资合伙企业分支机构(6840)', '外国(地区)企业在中国境内从事经营活动分公司', '普通的合伙所',
                          '港、澳、台投资企业', '事业法人单位营业', '集体事业单位营业(4120)', '内资', '有限责任公司(台港澳与境内合资外资比例低于25%)',
                          '股份有限公司(外商合资、上市)', '股份合作制(非法人)', '股份有限公司(非上市、外商投资企业投资)(1221)', '股份公司投资', '国有与集体企业联营',
                          '股份有限公司(其他台港澳股份有限公司)', '外资合分支机构', '全民与全民联营', '外国(地区)有限责任公司分支机构分公司', '股份有限公司(上市)(1210)',
                          '一人有限责任公司(外商投资企业法人独资)', '有限责任公司(中外合资)分支机构', '特殊普通合伙企业分支机构(4552)', '外国(地区)企业分公司']

        # 4种枚举值 （KG-basic所有值）
        P00000011_enum = ['存续', '注销', '吊销，未注销','其他']

        # 33种枚举值 (KG-basic所有值）
        P00000022_enum = ['中华人民共和国居民身份证', '外国（地区）护照', '居民身份证', 'NONE', '其他有效身份证件', '军人离(退)休证', '中华人民共和国军官证', '军官证',
                          '外国(地区)护照', '港澳居民来往内地通行证', '台湾居民来往大陆通行证', '户口薄', '中华人民共和国警官证', '台湾居民身份证', '台湾居民身份证(不再使用)',
                          '香港（永久性）居民身份证', '其他', '澳门（永久性）居民身份证', '澳门(永久性)居民身份证', '香港(永久性)居民身份证', '香港永久性居民身份证',
                          '企业法人营业执照(公司)', '香港特别行政区护照', '澳门永久性居民身份证', '台湾农民身份有关证明', '台湾居民居住证', '外国人永久居留身份证', '澳门特别行政区护照',
                          '港澳居民居住证', '澳门居民身份证', '华侨护照', '合伙企业营业执照', '警官证']

        # 274种枚举值 (KG-basic所有值）
        P00000023_enum = ['NONE', '中国', '乌兹别克斯坦', '南非', '中国香港特别行政区', '美国', '新加坡', '香港', '中 国', '中国香港', '中国台湾省', '瑞士',
                          '英属维尔京群岛', '日本', '德国', '萨摩亚', '百慕大', '澳大利亚', '文莱', '意大利', '韩国', '台湾', '澳门', '巴勒斯坦', '中国（香港）',
                          '俄罗斯联邦', '开曼群岛', '法国', '中国台湾', '加拿大', '伊拉克', '西班牙', '中国(香港)', '中国(居住在香港)', '毛里求斯', '土耳其',
                          '泰国', '英国', '美属萨摩亚', '荷兰', '印度尼西亚', '菲律宾', '阿尔巴尼亚', '以色列', '巴巴多斯', '安圭拉', '瑞典', '阿富汗', '叙利亚',
                          '马来西亚', '卢森堡', '也门', '中国（台湾）', '奥地利', '中国澳门', '印度', '阿根廷', '阿塞拜疆', '塞舌尔', '约旦', '美属维尔京群岛',
                          '巴基斯坦', '伊朗', '斯洛伐克', '尼日利亚', '其他国家地区', '中国澳门特别行政区', '爱尔兰', '塞浦路斯', '阿联酋', '比利时', '新西兰',
                          '委内瑞拉', '捷克', '俄罗斯', '阿拉伯联合酋长国', '丹麦', '中国(台湾)', '几内亚', '越南', '拉脱维亚', '黎巴嫩', '挪威', '芬兰',
                          '伯利兹', '乌克兰', '其他', '毛理求斯', '孟加拉国', '博茨瓦纳', '立陶宛', '蒙古', '喀麦隆', '哈萨克斯坦', '巴拿马', '埃塞俄比亚',
                          '塞内加尔', '大洋洲其他国家(地区)', '柬埔寨', '中非', '巴拉圭', '北美洲其他国家(地区)', '也门共和国', '多米尼加', '哥伦比亚', '波兰',
                          '中国(居住在台湾)', '埃及', '摩洛哥', '巴西', '卢旺达', '百慕大群岛', '沙特阿拉伯', '肯尼亚', '利比亚', '布基那法索', '智利', '加纳',
                          '亚美尼亚', '古巴', '伯利茨', '斯洛文尼亚', '墨西哥', '斯里兰卡', '希腊', '亚洲其它国家', '冰岛', '老挝', '白俄罗斯', '中国（澳门）',
                          '突尼斯', '欧洲其它国家', '坦桑尼亚', '苏丹', '冈比亚', '多哥', '马绍尔群岛', '塔吉克斯坦', '科威特', '津巴布维', '秘鲁', '巴林',
                          '爱沙尼亚', '多米尼加共和国', '刚果(金)', '巴哈马', '毛里塔尼亚', '其它', '圣基茨和尼维斯', '罗马尼亚', '马里', '库克群岛', '匈牙利',
                          '多米尼克', '葡萄牙', '直布罗陀', '西萨摩亚', '大洋洲其它国家', '尼日尔', '马耳他', '乌拉圭', '格林纳达', '尼泊尔', '英属萨摩亚群岛',
                          '保加利亚', '乌干达', '格鲁吉亚', '朝鲜', '厄瓜多尔', '纳米比亚', '克罗地亚', '英属处女岛', '索马里', '缅甸', '摩纳哥', '科特迪瓦',
                          '阿尔及利亚', '马绍尔群岛共和国', '牙买加', '利比里亚', '塞拉利昂', '布隆迪', '乍得', '吉尔吉斯坦', '吉尔吉斯斯坦', '南斯拉夫', '赤道几内亚',
                          '危地马拉', '马提尼克', '哥斯达黎加', '莫桑比克', '土库曼斯坦', '斐济', '中国(居住在澳门)', '科科斯(基林)群岛', '洪都拉斯',
                          '欧洲其他国家(地区)', '所罗门群岛', '法罗群岛', '孟加拉', '圣诞岛', '吉布提', '贝宁', '马达加斯加', '阿曼', '科摩罗', '安哥拉', '图瓦卢',
                          '厄立特里亚', '英属印度洋领土', '瓜德罗普', '列支敦士登', '卡塔尔', '摩尔多瓦', '马拉维', '南美洲其它国家', '加蓬', '科克群岛', '玻利维亚',
                          '圣马力诺', '厄尔特里亚', '汤加', '津巴布韦', '可可(基林)群岛', '布维岛', '维尔京群岛', '美国本土外小岛屿', '波黑', '赞比亚', '巴布亚新几内亚',
                          '基里巴斯', '莱索托', '瓦努阿图', '萨尔瓦多', '安圭拉岛', '英属印度洋领地', '诺福克岛', '苏里南', '刚果(布)', '安道尔', '特克斯和凯科斯群岛',
                          '圣文森特和格林纳丁斯', '斯威士兰', '瑙鲁', '安提瓜和巴布达', '荷属安的列斯', '马尔代夫', '特立尼达和多巴哥', '布基纳法索', '法属萨摩亚',
                          '瓦利斯和富图纳群岛', '几内亚比绍', '马其顿共和国', '布基钠法索', '刚果', '东帝汶', '皮特凯恩', '太平洋群岛', '中国(澳门)', '蒙特塞拉特',
                          '前南马其顿', '波多黎各', '纽埃', '刚果（金）', '波斯尼亚和黑塞哥维那', '非洲其它国家', '非洲其他国家(地区)', '马约特', '圭亚那', '英属印度洋群岛',
                          '佛得角', '法属圭亚那', '特克斯科斯群岛', '博茨瓦那']

        # Step3: 检查枚举类型
        for key in list(jdict.keys()):

            # 判断类型P00000003是否在枚举值里
            if key == 'P00000003' and type(jdict[key]) == dict:
                if '@value' in list(jdict[key].keys()) and jdict[key]['@value'].encode('utf-8') not in P00000003_enum:
                    P00000003_add.append(jdict[key]['@value'].encode('utf-8'))
                    errData.append('P00000003')

                if '@history' in jdict[key].keys():
                    for i in range(len(jdict[key]['@history'])):
                        for key2 in list(jdict[key]['@history'][i].keys()):
                            if key2 == '@value' and jdict[key]['@history'][i][key2].encode('utf-8') not in P00000003_enum:
                                if 'P00000003' not in errData:
                                    errData.append('P00000003')
                                P00000003_add.append(jdict[key]['@history'][i][key2].encode('utf-8'))


            # 判断营运状态P00000011是否在枚举值里
            if key == 'P00000011' and type(jdict[key]) == dict:
                if '@value' in list(jdict[key].keys()) and jdict[key]['@value'].encode('utf-8') not in P00000011_enum:
                    errData.append('P00000011')
                    P00000011_add.append(jdict[key]['@value'].encode('utf-8'))

                if '@history' in jdict[key].keys():
                    for i in range(len(jdict[key]['@history'])):
                        for key2 in list(jdict[key]['@history'][i].keys()):
                            if key2 == '@value' and jdict[key]['@history'][i][key2].encode('utf-8') not in P00000011_enum:
                                if 'P00000011' not in errData:
                                    errData.append('P00000011')
                                P00000011_add.append(jdict[key]['@history'][i][key2].encode('utf-8'))


            # 判断证件类型P00000022以及国籍P00000023是否在枚举值里
            if type(jdict[key]) == dict:
                if '@history' in list(jdict[key].keys()):
                    for i in range(len(jdict[key]['@history'])):
                        for key2 in list(jdict[key]['@history'][i].keys()):
                            if key2 == 'P00000022' and jdict[key]['@history'][i][key2].encode('utf-8') not in P00000022_enum:
                                errData.append('P00000022')
                                P00000022_add.append(jdict[key]['@history'][i][key2].encode('utf-8'))


                            if key2 == 'P00000023' and jdict[key]['@history'][i][key2].encode('utf-8') not in P00000023_enum:
                                errData.append('P00000023')
                                P00000023_add.append(jdict[key]['@history'][i][key2].encode('utf-8'))

                if '@value' in jdict[key].keys():
                    if type(jdict[key]['@value']) == list:
                        for i in range(len(jdict[key]['@value'])):
                            if type(jdict[key]['@value'][i]) == dict:
                                for key2 in list(jdict[key]['@value'][i].keys()):
                                    if key2 == 'P00000022' and jdict[key]['@value'][i][key2].encode('utf-8') not in P00000022_enum:
                                        if 'P00000022' not in errData:
                                            errData.append('P00000022')
                                        P00000022_add.append(jdict[key]['@value'][i][key2].encode('utf-8'))


                                    if key2 == 'P00000023' and jdict[key]['@value'][i][key2].encode('utf-8') not in P00000023_enum:
                                        if 'P00000023' not in errData:
                                            errData.append('P00000023')
                                        P00000023_add.append(jdict[key]['@value'][i][key2].encode('utf-8'))

        # Step4: 检查时间类型
        Pdate = ['P00000006', 'P00000007', 'P00000008', 'P00000010', 'P00000024']
        for key in list(jdict.keys()):
            if key in Pdate:
                for i in range(len(jdict[key]["@history"])):
                    if self.dateCheck(jdict[key]["@history"][i]["@value"]) == 'P00000006':
                        errData.append('P00000006')

                if self.dateCheck(jdict[key]["@value"]) == 'P00000006':
                    if 'P00000006' not in errData:
                        errData.append('P00000006')

        # Step5：如果(高管）History中有重复的，报错误代码P099
        flag_all = 0
        for key in jdict.keys():
            if key != 'P00000015' and key != 'P00000018':
                continue
            i = 0
            # 进行一次双层循环，将相同的人名合并，并更改endTime
            if type(jdict[key]) == dict and '@history' in jdict[key].keys() and type(jdict[key]['@history']) == list:
                while i < (len(jdict[key]['@history'])):
                    try:
                        temp_dict_i = jdict[key]['@history'][i]
                        temp_dict_i_new = {key: val for key, val in temp_dict_i.items() if
                                           key != '@startTime' and key != '@endTime' and key != '@updateTime'}
                    except Exception as e:
                        break

                    for j in range(0, len(jdict[key]['@history'])):
                        if j == i:
                            continue
                        try:
                            temp_dict_j = jdict[key]['@history'][j]
                            temp_dict_j_new = {key: val for key, val in temp_dict_j.items() if
                                               key != '@startTime' and key != '@endTime' and key != '@updateTime'}
                        except Exception as e:
                            break

                        if temp_dict_i_new == temp_dict_j_new:
                            errData.append('errKey:'+ key)
                            flag_all += 1

                    i = i + 1

        if flag_all > 0:
            errData.append('P00000099')



        # Step6：如果History中有完全相同的重复，报错误代码P098 (不检查P095字段，因为合法）
        flag_1 = 0
        for key in jdict.keys():
            if key == 'P00000095':
                continue
            i = 0
            # 进行一次双层循环，将相同的人名合并，并更改endTime
            if type(jdict[key]) == dict and '@history' in jdict[key].keys() and type(jdict[key]['@history']) == list:
                # 这里怎么想个办法，先将History去重处理
                while i < (len(jdict[key]['@history'])):
                    try:
                        temp_dict_i = jdict[key]['@history'][i]
                    except Exception as e:
                        break
                    for j in range(0, len(jdict[key]['@history'])):
                        if j == i:
                            continue
                        try:
                            temp_dict_j = jdict[key]['@history'][j]
                        except Exception as e:
                            break
                        if temp_dict_i == temp_dict_j:
                            errData.append('errKey:'+ key)
                        # 如果不存在时间且完全一样，直接去重History
                            flag_1 += 1
                            break
                    i = i + 1

            # 如果flag大于0，说明该字段对应的数据为问题数据
        if flag_1 > 0:
            errData.append('P00000098')

        res = str(errData)

        if 'P00000003' in errData:
            res += str(P00000003_add)
        if 'P00000011' in errData:
            res += str(P00000011_add)
        if 'P00000022' in errData:
            res += str(P00000022_add)
        if 'P00000023' in errData:
            res += str(P00000023_add)

        return res




    # 检查时间格式为YYYY-MM-DD格式
    def dateCheck(self, data):
        if data == 'NONE':
            return '000'
        pt1 = u'[\d]{4}-[\d]{1,2}-[\d]{1,2}'
        res = re.match(pt1, data)
        if res == None:
            return 'P00000006'
        return '000'




sc = SparkContext(appName='checkData33')
outputPath = sys.argv[2]
inputPath = sys.argv[1]
input_data = sc.textFile(inputPath).repartition(3000).map(lambda x: (x.split("\t")[0],json.loads(x.split("\t")[1])))
input_data.persist(pyspark.StorageLevel.MEMORY_AND_DISK)
method = checkRes("../conf/schema_mapping.conf")
#update_data = input_data.map(lambda x : (x[0], method.checkData(x[1]))).repartition(200)
update_data = input_data.map(lambda x : (x[0], method.checkData(x[1]))).repartition(200).filter(lambda x: x[1] != '[]')
#update_data = update_data.filter(lambda x: x[1] != '[]')
input_data.unpersist()
update_data.map(lambda x : "\t".join([x[0], x[1]])).saveAsTextFile(outputPath)
sys.stderr.write("^^^^^^^^^^^^^")
sc.stop()
